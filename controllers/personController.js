const Person = require('../models/person');

// ‚úÖ 1. Cr√©er une personne
const createSinglePerson = () => {
    const newPerson = new Person({
        name: 'Chaima',
        age: 25,
        favoriteFoods: ['Pizza', 'Couscous']
    });

    return newPerson.save()
        .then(data => console.log("‚úÖ Personne enregistr√©e :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// ‚úÖ 2. Cr√©er plusieurs personnes
const createManyPeople = () => {
    const arrayOfPeople = [
        { name: 'Amine', age: 30, favoriteFoods: ['Tacos', 'Burger'] },
        { name: 'Sara', age: 22, favoriteFoods: ['Salade', 'P√¢tes'] },
        { name: 'Ali', age: 28, favoriteFoods: ['Sushi'] }
    ];

    return Person.create(arrayOfPeople)
        .then(data => console.log("‚úÖ Plusieurs personnes ajout√©es :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// üîç 3. Trouver toutes les personnes avec un nom donn√©
const findPeopleByName = (personName) => {
    return Person.find({ name: personName })
        .then(data => console.log("üîç Personnes trouv√©es :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// üîé 4. Trouver une personne par un aliment favori
const findOneByFood = (food) => {
    return Person.findOne({ favoriteFoods: food })
        .then(data => console.log("üîé Trouv√© par aliment :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// üÜî 5. Trouver une personne par ID
const findPersonById = (personId) => {
    return Person.findById(personId)
        .then(data => console.log("üÜî Trouv√© par ID :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// ‚úèÔ∏è 6. Modifier : Ajouter "hamburger" √† favoriteFoods, puis sauvegarder
const updateFavoriteFoods = (personId) => {
    return Person.findById(personId)
        .then(person => {
            person.favoriteFoods.push('hamburger');
            return person.save();
        })
        .then(updated => console.log("üçî Favoris mis √† jour :", updated))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// üîÑ 7. Modifier l'√¢ge via findOneAndUpdate
const updateAgeByName = (personName) => {
    return Person.findOneAndUpdate({ name: personName }, { age: 20 }, { new: true })
        .then(data => console.log("üßì √Çge mis √† jour :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// ‚ùå 8. Supprimer par ID
const deletePersonById = (personId) => {
    return Person.findByIdAndRemove(personId)
        .then(data => console.log("üóëÔ∏è Supprim√© :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// ‚ùå 9. Supprimer tous les "Mary"
const deleteManyMary = () => {
    return Person.deleteMany({ name: 'Mary' })
        .then(result => console.log("üßπ Supprim√©s (Mary) :", result))
        .catch(err => console.error("‚ùå Erreur :", err));
};

// üîó 10. Requ√™te avec tri, limite, et s√©lection
const searchBurritoLovers = () => {
    return Person.find({ favoriteFoods: 'burritos' })
        .sort({ name: 1 }) // Trier par nom (ascendant)
        .limit(2) // Limiter √† 2 r√©sultats
        .select('-age') // Masquer l'√¢ge
        .exec()
        .then(data => console.log("üîó Recherche filtr√©e :", data))
        .catch(err => console.error("‚ùå Erreur :", err));
};

module.exports = {
    createSinglePerson,
    createManyPeople,
    findPeopleByName,
    findOneByFood,
    findPersonById,
    updateFavoriteFoods,
    updateAgeByName,
    deletePersonById,
    deleteManyMary,
    searchBurritoLovers
};